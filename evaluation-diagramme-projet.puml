@startuml Évaluation Diagramme vs Projet Réel

title Évaluation de Cohérence - Diagramme UML vs Implémentation

!define COHERENT class
!define INCOHERENT class
!define MANQUANT class
!define CORRECTION class

' Classes cohérentes avec l'implémentation
COHERENT User {
  ✅ _id: ObjectId
  ✅ name: String
  ✅ email: String
  ✅ password: String
  ✅ role: String (user|admin|delivery)
  ✅ phone: String
  ✅ isAvailable: Boolean
  ✅ address: String
  ✅ mustChangePassword: Boolean
  ✅ currentLocation: Array[Number]
  --
  ❌ MANQUANT: status (pending|active|rejected)
  ❌ MANQUANT: vehicleType, vehiclePhoto, facePhoto, cinPhoto
}

COHERENT Order {
  ✅ _id: ObjectId
  ✅ user: ObjectId -> User
  ✅ items: Array[OrderItem]
  ✅ totalAmount: Number
  ✅ status: String (pending|confirmed|preparing|ready|out_for_delivery|delivered|cancelled)
  ✅ deliveryAddress: String
  ✅ deliveryMan: ObjectId -> User
  ✅ deliveryRating: Number
  ✅ foodRating: Number
  ✅ feedbackComment: String
  ✅ payment: ObjectId -> Payment
  --
  ❌ MANQUANT: customerLocation (GeoLocation)
  ❌ MANQUANT: estimatedDeliveryTime, actualDeliveryTime
  ❌ MANQUANT: deliveryNotes, assignedAt, cancelledAt
}

COHERENT Payment {
  ✅ _id: ObjectId
  ✅ userId: ObjectId -> User
  ✅ orderId: ObjectId -> Order
  ✅ amount: Number
  ✅ paymentMethod: String (card|cash)
  ✅ paymentStatus: String (pending|paid|failed|refunded)
  ✅ stripePaymentId: String
  --
  ❌ MANQUANT: stripeChargeId, stripePaymentIntentId
  ❌ MANQUANT: paidAt, refundedAt, refundId, refundReason
}

COHERENT Food {
  ✅ _id: ObjectId
  ✅ name: String
  ✅ category: String
  ✅ price: Number
  ✅ description: String
  ✅ image: String
  ✅ available: Boolean
}

' Classes avec incohérences
INCOHERENT DelevryHistory {
  ❌ NOM: "DelevryHistory" (devrait être "DeliveryHistory")
  ✅ deliveryManId: ObjectId -> User
  ✅ customerId: ObjectId -> User
  ✅ orderId: ObjectId -> Order
  ✅ deliveryRating: Number
  ✅ assignedAt, pickedUpAt, deliveredAt: Date
  --
  ❌ MANQUANT: pickupLocation, deliveryLocation (GeoLocation)
  ❌ MANQUANT: routePoints: Array[RoutePoint]
  ❌ MANQUANT: totalDistance, totalTime, averageSpeed
  ❌ MANQUANT: statusHistory: Array[StatusEntry]
  ❌ MANQUANT: deliveryNotes, customerFeedback
  ❌ MANQUANT: completedAt: Date
}

' Classes manquantes dans le diagramme
MANQUANT OrderItem {
  +food: ObjectId -> Food
  +quantity: Number
  +price: Number
}

MANQUANT GeoLocation {
  +latitude: Number
  +longitude: Number
  +accuracy: Number
  +timestamp: Date
}

MANQUANT RoutePoint {
  +latitude: Number
  +longitude: Number
  +timestamp: Date
  +accuracy: Number
  +speed: Number
  +heading: Number
}

MANQUANT StatusEntry {
  +status: String (assigned|picked_up|in_transit|delivered|failed)
  +timestamp: Date
  +location: GeoLocation
  +notes: String
}

' Énumérations - Évaluation
note as N1
  **ÉVALUATION DES ÉNUMÉRATIONS:**
  
  ✅ **UserRole**: Cohérent
  - Diagramme: Admin, Costumer, DelevryMen
  - Code: "user", "admin", "delivery"
  - CORRECTION: "Costumer" → "Customer", "DelevryMen" → "Delivery"
  
  ✅ **OrderStatus**: Cohérent
  - Diagramme: Pending, confirmed, preparing, ready, out_for_delevry, delivred, cancelled
  - Code: 'pending', 'confirmed', 'preparing', 'ready', 'out_for_delivery', 'delivered', 'cancelled'
  - CORRECTION: "out_for_delevry" → "out_for_delivery", "delivred" → "delivered"
  
  ✅ **PaymentMethod**: Cohérent
  - Diagramme: cash, cart
  - Code: 'card', 'cash'
  - CORRECTION: "cart" → "card"
  
  ✅ **PaymentStatus**: Cohérent
  - Diagramme: pending, paid, failed
  - Code: 'pending', 'paid', 'failed', 'refunded'
  - MANQUANT: "refunded" dans le diagramme
end note

' Relations - Évaluation
note as N2
  **ÉVALUATION DES RELATIONS:**
  
  ✅ **User → Order (1:many)**: Cohérent
  ✅ **User → Payment (1:many)**: Cohérent
  ✅ **User → DeliveryHistory (1:many)**: Cohérent
  ✅ **Order → Payment (1:1)**: Cohérent
  ✅ **Order → DeliveryHistory (1:1)**: Cohérent
  ✅ **Order → FoodItem (1:many)**: Cohérent
  ✅ **FoodItem → Food (many:1)**: Cohérent
  
  ❌ **PROBLÈME MAJEUR**: 
  - Diagramme: DeliveryHistory (0..*) → Order (0..1)
  - Code: DeliveryHistory (1) → Order (1) - Relation 1:1
  - CORRECTION: DeliveryHistory (1) → Order (1)
end note

' Score global
note as N3
  **SCORE GLOBAL DE COHÉRENCE:**
  
  🟢 **COHÉRENT (70%)**:
  - Structure générale correcte
  - Relations principales respectées
  - Entités principales présentes
  
  🟡 **AMÉLIORATIONS NÉCESSAIRES (20%)**:
  - Corrections orthographiques
  - Ajout d'attributs manquants
  - Correction des cardinalités
  
  🔴 **PROBLÈMES MAJEURS (10%)**:
  - Nom de classe incorrect
  - Attributs critiques manquants
  - Cardinalités incorrectes
end note

@enduml
