@startuml Test Flow Architecture - Detailed View

!theme plain
skinparam backgroundColor #FFFFFF
skinparam activityStyle rectangle

title Flux de Tests Détaillés - Architecture de Test

start

partition "Frontend Testing Flow" {
    :Démarrer Vitest;
    :Charger configuration Vitest;
    :Initialiser jsdom environment;
    :Configurer les mocks;
    note right
      - IntersectionObserver
      - ResizeObserver
      - matchMedia
      - localStorage/sessionStorage
      - fetch API
    end note
    
    partition "Test Execution" {
        :Exécuter Unit Tests;
        :Exécuter Component Tests;
        :Exécuter Integration Tests;
        
        partition "Component Testing" {
            :Rendre composant React;
            :Simuler interactions utilisateur;
            :Vérifier état du composant;
            :Valider rendu DOM;
        }
        
        partition "API Mocking" {
            :Intercepter appels fetch;
            :Retourner données mockées;
            :Tester états de chargement;
            :Tester gestion d'erreurs;
        }
    }
    
    :Générer rapport de couverture;
    :Afficher résultats tests;
}

partition "Backend Testing Flow" {
    :Démarrer Jest;
    :Charger configuration Jest;
    :Initialiser MongoDB Memory Server;
    :Configurer base de données test;
    
    partition "Test Categories" {
        :Exécuter Authentication Tests;
        note right
          - Registration
          - Login/Logout
          - Password management
          - JWT validation
        end note
        
        :Exécuter Food Management Tests;
        note right
          - CRUD operations
          - File upload
          - Admin authorization
          - Validation
        end note
        
        :Exécuter Order Management Tests;
        note right
          - Order creation
          - Status updates
          - Delivery tracking
          - Payment processing
        end note
        
        :Exécuter Delivery Tests;
        note right
          - Application process
          - Approval workflow
          - Availability management
          - Role-based access
        end note
    }
    
    partition "API Testing with Supertest" {
        :Envoyer requêtes HTTP;
        :Valider codes de statut;
        :Vérifier structure réponse;
        :Tester authentification;
        :Valider autorisation;
    }
    
    partition "Database Testing" {
        :Créer données de test;
        :Exécuter opérations CRUD;
        :Vérifier intégrité données;
        :Nettoyer après chaque test;
    }
    
    :Générer rapport de couverture;
    :Afficher résultats tests;
}

partition "Test Configuration" {
    :Charger setup.js (Backend);
    :Charger setup.ts (Frontend);
    :Configurer variables d'environnement;
    :Initialiser mocks globaux;
    :Configurer timeouts;
}

partition "Coverage Analysis" {
    :Collecter métriques de couverture;
    :Générer rapports HTML;
    :Générer rapports LCOV;
    :Valider seuils de couverture;
    note right
      **Objectifs:**
      - Statements: 80%+
      - Branches: 75%+
      - Functions: 85%+
      - Lines: 80%+
    end note
}

stop

@enduml
