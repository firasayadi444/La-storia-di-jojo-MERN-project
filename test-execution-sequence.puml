@startuml Test Execution Sequence

!theme plain
skinparam backgroundColor #FFFFFF

title Séquence d'Exécution des Tests - Architecture de Test

actor "Développeur" as Dev
participant "Frontend Tests" as Frontend
participant "Vitest" as Vitest
participant "Testing Library" as RTL
participant "React Components" as Components
participant "Backend Tests" as Backend
participant "Jest" as Jest
participant "Supertest" as Supertest
participant "MongoDB Memory" as MongoMem
participant "API Endpoints" as API

== Frontend Test Execution ==

Dev -> Frontend : npm run test
Frontend -> Vitest : Initialize test runner
Vitest -> RTL : Load testing utilities
RTL -> Components : Setup component testing

loop For each test file
    Vitest -> Components : Load component
    Components -> RTL : Render component
    RTL -> Components : Simulate user interaction
    Components -> RTL : Verify state changes
    RTL -> Vitest : Report test results
end

Vitest -> Frontend : Generate coverage report
Frontend -> Dev : Display test results

== Backend Test Execution ==

Dev -> Backend : npm test
Backend -> Jest : Initialize test runner
Jest -> MongoMem : Start memory database
MongoMem -> Jest : Database ready

loop For each test suite
    Jest -> Supertest : Create test request
    Supertest -> API : Send HTTP request
    API -> MongoMem : Query database
    MongoMem -> API : Return data
    API -> Supertest : Send response
    Supertest -> Jest : Validate response
    Jest -> MongoMem : Cleanup test data
end

Jest -> Backend : Generate coverage report
Backend -> Dev : Display test results

== Test Configuration ==

note over Vitest, Jest
  **Configuration commune:**
  - Timeout: 30s
  - Coverage: 80%+ statements
  - Environment isolation
  - Automatic cleanup
end note

== Error Handling ==

alt Test Failure
    Vitest -> Dev : Report failure details
    Jest -> Dev : Report failure details
    Dev -> Frontend : Debug frontend issues
    Dev -> Backend : Debug backend issues
end

== Coverage Analysis ==

Jest -> Backend : Generate LCOV report
Vitest -> Frontend : Generate HTML report
Backend -> Dev : Coverage metrics
Frontend -> Dev : Coverage metrics

note over Dev
  **Métriques de couverture:**
  - Statements: 80%+
  - Branches: 75%+
  - Functions: 85%+
  - Lines: 80%+
end note

@enduml
